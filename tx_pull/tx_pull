#!/usr/bin/env python
#  -*- coding: utf-8 -*-
"""
This script is meant to pull the translations from Transifex .
Technically, it will pull the translations from Transifex,
compare it with the po files in the repository and replace it if needed

Installation
============

For using this utility, you need to install these dependencies:

* slumber library for handling Transifex calls (REST calls). To install it,
  use `sudo pip install slumber`.
* polib library for po handling. To install it, use `sudo pip install polib`.

Configuration
=============

You can have a file called config.cfg on the same folder of the script for
storing credentials parameters. You can generate an skeleton config running
this script for a first time.

Usage
=====

tx_pull.py TX_LOGIN TX_PASSWORD [-h] [-s|--tx_slug TRANSIFEX_SLUG] [-p|--project_path FOLDER_PATH_OUT]

optional arguments:
  -h, --help            show this help message and exit
  -s, --tx_slub         The transifex project slug (look in the project URL)
  -p, --project_path    The project folder path out

Credits
=======

Contributors
------------

* Samuel Lefever
* Pedro M. Baeza <pedro.baeza@serviciosbaeza.com>
* Sylvain Van Hoof <sylvain.vanhoof@eezee-it.com>
"""

import argparse
import polib
import re
from slumber import API, exceptions
import ConfigParser
import os

parser = argparse.ArgumentParser(
    description='Pull Transifex updated translations to the file system',
    add_help=True)
parser.add_argument('-s', '--tx_slug', dest='tx_slug', help='Transifex Slug')
parser.add_argument('-p', '--project_path', dest='path_out', help='Project Path')

TX_URL = "https://www.transifex.com/api/2/"


class TransifexPuller(object):
    def __init__(self):
        config = read_config()
        arguments = parser.parse_args()

        print '####################'
        print '# Transifex Puller #'
        print '####################'
        print

        print 'Read configuration from config file'
        tx_login = config.get('Transifex', 'login')
        if tx_login:
            print 'Login: ',  tx_login
        else:
            while not tx_login:
                tx_login = raw_input('Transifex Login: ')
                if not tx_login:
                    print 'Plase insert a login'

        tx_password = config.get('Transifex', 'password')
        if tx_password:
            print 'Password: ' , re.sub('.', '*', tx_password)
        else:
            while not tx_password:
                tx_password = raw_input('Transifex Password: ')
                if not tx_password:
                    print 'Please insert a password'

        tx_slug = arguments.tx_slug or config.get('Transifex', 'slug')
        if tx_slug:
            print 'Slug: ' , tx_slug
        else:
            while not tx_slug:
                tx_slug = raw_input('Transifex Slug: ')
                if not tx_slug:
                    print 'Please insert a password'

        tx_path = arguments.path_out or config.get('Transifex', 'path_out') or os.getcwd()
        tx_path = os.path.abspath(tx_path)
        while not self._check_path(tx_path):
            tx_path = raw_input('Folder path out (should be a git directory): ')
        print 'Path: ' , tx_path

        self.transifex_project_slug = tx_slug
        self.tx_num_retries = config.get('Transifex', 'num_retries')

        self.path_out = tx_path

        # Connect to Transifex
        self.tx_api = API(TX_URL, auth=(tx_login, tx_password))

    def _check_path(self, path):
        print
        print 'Check folder ', path
        if not os.path.isdir(path):
            print 'The folder %s doesn\'t exist' % path
            return False
        if not os.path.isdir(os.path.join(path, '.git')):
            print 'This folder exists but it is not a git folder (no .git folder found)'
            return False
        if not os.access(path, os.W_OK):
            print 'You cannot write on this folder'
            return False

        return True

    def pull_translation(self):
        print "Retrieve project %s" % (self.transifex_project_slug)
        try:
            tx_project = self.tx_api.project(self.transifex_project_slug).get()
        except:
            print 'Cannot retrieve the project %s' % self.transifex_project_slug
            print 'Check your login and password'
            print 'Otherwise, check the slug'
            return

        print "Processing project '%s'..." % tx_project['name']
        tx_project_api = self.tx_api.project(tx_project['slug'])
        resources = tx_project_api.resources().get()
        for resource in resources:
            print "Checking resource %s..." % resource['name']
            tx_resource_api = tx_project_api.resource(resource['slug'])
            resource = tx_resource_api.get(details=True)
            for lang in resource['available_languages']:
                cont = 0
                tx_lang = False
                while cont < self.tx_num_retries and not tx_lang:
                    # for some weird reason, sometimes Transifex fails to
                    # some requests, so this retry mechanism handles this
                    # problem
                    try:
                        tx_lang = tx_resource_api.translation(
                            lang['code']).get()
                    except exceptions.HttpClientError:
                        tx_lang = False
                        cont += 1
                if tx_lang:
                    try:
                        tx_po_file = polib.pofile(tx_lang['content'])
                        gl_i18n_path = os.path.join(self.path_out, resource['slug'], "i18n")
                        if not os.path.isdir(gl_i18n_path):
                            os.makedirs(gl_i18n_path)

                        gl_file_path = os.path.join(gl_i18n_path, lang['code'] + '.po')
                        tx_po_file.save(gl_file_path)

                    except (KeyboardInterrupt, SystemExit):
                        raise
                    except:
                        raise
                        print "ERROR: processing lang '%s'" % lang['code']
                else:
                    print "ERROR: fetching lang '%s'" % lang['code']


def main():
    tp = TransifexPuller()
    tp.pull_translation()


CREDENTIALS_FILE = 'config.cfg'


def init_config():
    config = ConfigParser.ConfigParser()
    config.add_section("Transifex")
    config.set("Transifex", "login", "")
    config.set("Transifex", "password", "")
    config.set("Transifex", "slug", "")
    config.set("Transifex", "path_out", "")
    config.set("Transifex", "num_retries", 3)
    write_config(config)


def read_config():
    if not os.path.exists(CREDENTIALS_FILE):
        init_config()
    config = ConfigParser.ConfigParser()
    config.read(CREDENTIALS_FILE)
    return config


def write_config(config):
    with open(CREDENTIALS_FILE, 'w') as fd:
        config.write(fd)


if __name__ == '__main__':
    main()
